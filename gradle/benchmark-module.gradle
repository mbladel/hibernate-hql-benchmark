import static java.util.Collections.emptyList

apply from: rootProject.file( 'gradle/java-module.gradle' )
apply plugin: 'me.champeau.gradle.jmh'

dependencies {
	implementation project( ':common' )

	implementation libraries.jpa

	runtimeOnly libraries.h2
}

ext {
	if ( project.hasProperty( 'relativeJmhReportDir' ) ) {
		jmhReportDir = project.file( "${buildDir}/${project.hasProperty( 'relativeJmhReportDir' )}" )
	}
	else if ( System.getProperty( 'relativeJmhReportDir' ) != null ) {
		jmhReportDir = project.file( "${buildDir}/${System.getProperty( 'relativeJmhReportDir' )}" )
	}
	else {
		def formattedDate = new Date().format( 'yyyy-MM-dd-HH-mm-ss' )
		jmhReportDir = project.file( "${buildDir}/reports/jmh/${formattedDate}" )
	}

	jmhReportHumanFile = project.file( "${jmhReportDir}/human.txt" )
	jmhReportJsonFile = project.file( "${jmhReportDir}/results.json" )

	initialNoTurboSetting = 0
	initialRandomizerSetting = 0

	runtime = Runtime.getRuntime()
	// use of internal - https://github.com/gradle/gradle/issues/7735
	os = org.gradle.internal.os.OperatingSystem.current()

	if ( os.linux && project.hasProperty( "adjustOS" ) ) {
		initialNoTurboSetting = determineInitialSetting( "/sys/devices/system/cpu/intel_pstate/no_turbo", runtime )
		initialRandomizerSetting = determineInitialSetting( "/proc/sys/kernel/randomize_va_space", runtime )
	}
}

// JMH for `avgt` profiling
jmh {
	benchmarkMode = ['avgt']

	iterations = 20 //default 10
	fork = 2 //default 10
	warmupIterations = 20 // Number of warmup iterations to do.

	humanOutputFile = jmhReportHumanFile

	resultsFile = jmhReportJsonFile
	resultFormat = 'JSON'

	def inclusionsSelector = locateProperty( 'benchmark_inclusions' )
	if ( inclusionsSelector != null ) {
		logger.lifecycle "Inclusion selector : `${inclusionsSelector}`"
		include = [ inclusionsSelector ]
	}

	// for available options, see https://github.com/melix/jmh-gradle-plugin/blob/master/README.adoc#configuration-options
//	jvmArgsAppend = [ '-XX:+UnlockDiagnosticVMOptions',  '-XX:+DebugNonSafepoints',  '-XX:+UnlockCommercialFeatures' ]

	def profilers = locateListProperty( "profilers" )
	if ( !profilers.empty ) {
		logger.lifecycle "Profilers : `{}`", profilers
		it.profilers = profilers
	}
	else {
		it.profilers = []
	}

	def jvmArguments = locateListProperty( "jvm_args" )
	if ( ! jvmArguments.empty ) {
		logger.lifecycle "JVM args : `{}`", jvmArguments
		jvmArgsAppend = jvmArguments
	}
	else {
		jvmArgsAppend = []
	}
}


// JMH for `thrpt` profiling
//jmh {
//	// for available options, see https://github.com/melix/jmh-gradle-plugin/blob/master/README.adoc#configuration-options
//
//	jvmArgsAppend = [ '-XX:+UnlockDiagnosticVMOptions',  '-XX:+DebugNonSafepoints',  '-XX:+UnlockCommercialFeatures' ]
//
//	benchmarkMode = ['thrpt']
//
//	threads = 10
////	iterations = 20
////	fork = 2 //default 10
////	warmupIterations = 20 // Number of warmup iterations to do.
//
//	humanOutputFile = jmhReportHumanFile
//
//	resultsFile = jmhReportJsonFile
//	resultFormat = 'JSON'
//}

List<String> locateListProperty(String propertyName) {
	def propertyValue = locateProperty( propertyName )
	if ( propertyValue == null ) {
		return emptyList()
	}

	return propertyValue.split(",")*.trim()
}

String locateProperty(String propertyName) {
	if ( project.hasProperty( propertyName ) ) {
		return project.property( propertyName )
	}

	def sysProp = System.getProperty( propertyName )
	if ( sysProp != null ) {
		return sysProp
	}

	return null
}

task benchmark( dependsOn: [tasks.jmh] ) {
	description = "Alias for the JMH task"
}

tasks.jmh {
	doFirst {
		mkdir jmhReportDir
	}

	if ( os.linux && project.hasProperty( "adjustOS" ) ) {
		println "Applying OS adjustments"
		logger.lifecycle( "Applying OS adjustments" )

		doFirst {
			runtime.exec( "sudo tuned-adm profile throughput-performance" )

			runtime.exec( "sudo echo 1 > /sys/devices/system/cpu/intel_pstate/no_turbo" )

			runtime.exec( "echo \"performance\" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor" )

			runtime.exec( "sudo echo 0 > /proc/sys/kernel/randomize_va_space" )
		}

		doLast {
			runtime.exec( "sudo echo ${initialNoTurboSetting} > /sys/devices/system/cpu/intel_pstate/no_turbo" )

			runtime.exec( "sudo echo ${initialRandomizerSetting} > /proc/sys/kernel/randomize_va_space" )
		}
	}
}

int determineInitialSetting(String settingFilePath, Runtime runtime) {
	Process process = runtime.exec( "sudo cat " + settingFilePath )

	process.outputStream
	// todo : because we are using sudo, do we want to check whether sudo prompted for pw?
	Reader reader = new InputStreamReader( process.getInputStream() )
	def output = reader.readLine()
	initialNoTurboSetting = output == null ? 0 : Integer.valueOf( output )
}